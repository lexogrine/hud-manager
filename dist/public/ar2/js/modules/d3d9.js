"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.D3DTRANSFORMSTATETYPE = exports.D3DPRIMITIVETYPE = exports.D3DPOOL = exports.D3DUSAGE = exports.D3DSAMPLERSTATETYPE = exports.D3DTEXTUREFILTERTYPE = exports.D3DTEXTUREARG = exports.D3DTEXTUREOP = exports.D3DTEXTURESTAGESTATETYPE = exports.D3DFILLMODE = exports.D3DDECLUSAGE = exports.D3DDECLMETHOD = exports.D3DDECLTYPE = exports.D3DRS_COLORWRITEENABLE = exports.D3DCULL = exports.D3DCMPFUNC = exports.D3DZBUFFERTYPE = exports.D3DBLEND = exports.D3DRENDERSTATETYPE = void 0;
exports.D3DRENDERSTATETYPE = {
    D3DRS_ZENABLE: 7,
    D3DRS_FILLMODE: 8,
    D3DRS_SHADEMODE: 9,
    D3DRS_ZWRITEENABLE: 14,
    D3DRS_ALPHATESTENABLE: 15,
    D3DRS_LASTPIXEL: 16,
    D3DRS_SRCBLEND: 19,
    D3DRS_DESTBLEND: 20,
    D3DRS_CULLMODE: 22,
    D3DRS_ZFUNC: 23,
    D3DRS_ALPHAREF: 24,
    D3DRS_ALPHAFUNC: 25,
    D3DRS_DITHERENABLE: 26,
    D3DRS_ALPHABLENDENABLE: 27,
    D3DRS_FOGENABLE: 28,
    D3DRS_SPECULARENABLE: 29,
    D3DRS_FOGCOLOR: 34,
    D3DRS_FOGTABLEMODE: 35,
    D3DRS_FOGSTART: 36,
    D3DRS_FOGEND: 37,
    D3DRS_FOGDENSITY: 38,
    D3DRS_RANGEFOGENABLE: 48,
    D3DRS_STENCILENABLE: 52,
    D3DRS_STENCILFAIL: 53,
    D3DRS_STENCILZFAIL: 54,
    D3DRS_STENCILPASS: 55,
    D3DRS_STENCILFUNC: 56,
    D3DRS_STENCILREF: 57,
    D3DRS_STENCILMASK: 58,
    D3DRS_STENCILWRITEMASK: 59,
    D3DRS_TEXTUREFACTOR: 60,
    D3DRS_WRAP0: 128,
    D3DRS_WRAP1: 129,
    D3DRS_WRAP2: 130,
    D3DRS_WRAP3: 131,
    D3DRS_WRAP4: 132,
    D3DRS_WRAP5: 133,
    D3DRS_WRAP6: 134,
    D3DRS_WRAP7: 135,
    D3DRS_CLIPPING: 136,
    D3DRS_LIGHTING: 137,
    D3DRS_AMBIENT: 139,
    D3DRS_FOGVERTEXMODE: 140,
    D3DRS_COLORVERTEX: 141,
    D3DRS_LOCALVIEWER: 142,
    D3DRS_NORMALIZENORMALS: 143,
    D3DRS_DIFFUSEMATERIALSOURCE: 145,
    D3DRS_SPECULARMATERIALSOURCE: 146,
    D3DRS_AMBIENTMATERIALSOURCE: 147,
    D3DRS_EMISSIVEMATERIALSOURCE: 148,
    D3DRS_VERTEXBLEND: 151,
    D3DRS_CLIPPLANEENABLE: 152,
    D3DRS_POINTSIZE: 154,
    D3DRS_POINTSIZE_MIN: 155,
    D3DRS_POINTSPRITEENABLE: 156,
    D3DRS_POINTSCALEENABLE: 157,
    D3DRS_POINTSCALE_A: 158,
    D3DRS_POINTSCALE_B: 159,
    D3DRS_POINTSCALE_C: 160,
    D3DRS_MULTISAMPLEANTIALIAS: 161,
    D3DRS_MULTISAMPLEMASK: 162,
    D3DRS_PATCHEDGESTYLE: 163,
    D3DRS_DEBUGMONITORTOKEN: 165,
    D3DRS_POINTSIZE_MAX: 166,
    D3DRS_INDEXEDVERTEXBLENDENABLE: 167,
    D3DRS_COLORWRITEENABLE: 168,
    D3DRS_TWEENFACTOR: 170,
    D3DRS_BLENDOP: 171,
    D3DRS_POSITIONDEGREE: 172,
    D3DRS_NORMALDEGREE: 173,
    D3DRS_SCISSORTESTENABLE: 174,
    D3DRS_SLOPESCALEDEPTHBIAS: 175,
    D3DRS_ANTIALIASEDLINEENABLE: 176,
    D3DRS_MINTESSELLATIONLEVEL: 178,
    D3DRS_MAXTESSELLATIONLEVEL: 179,
    D3DRS_ADAPTIVETESS_X: 180,
    D3DRS_ADAPTIVETESS_Y: 181,
    D3DRS_ADAPTIVETESS_Z: 182,
    D3DRS_ADAPTIVETESS_W: 183,
    D3DRS_ENABLEADAPTIVETESSELLATION: 184,
    D3DRS_TWOSIDEDSTENCILMODE: 185,
    D3DRS_CCW_STENCILFAIL: 186,
    D3DRS_CCW_STENCILZFAIL: 187,
    D3DRS_CCW_STENCILPASS: 188,
    D3DRS_CCW_STENCILFUNC: 189,
    D3DRS_COLORWRITEENABLE1: 190,
    D3DRS_COLORWRITEENABLE2: 191,
    D3DRS_COLORWRITEENABLE3: 192,
    D3DRS_BLENDFACTOR: 193,
    D3DRS_SRGBWRITEENABLE: 194,
    D3DRS_DEPTHBIAS: 195,
    D3DRS_WRAP8: 198,
    D3DRS_WRAP9: 199,
    D3DRS_WRAP10: 200,
    D3DRS_WRAP11: 201,
    D3DRS_WRAP12: 202,
    D3DRS_WRAP13: 203,
    D3DRS_WRAP14: 204,
    D3DRS_WRAP15: 205,
    D3DRS_SEPARATEALPHABLENDENABLE: 206,
    D3DRS_SRCBLENDALPHA: 207,
    D3DRS_DESTBLENDALPHA: 208,
    D3DRS_BLENDOPALPHA: 209 /* Blending operation for the alpha channel when D3DRS_SEPARATEDESTALPHAENABLE is TRUE */
};
exports.D3DBLEND = {
    D3DBLEND_ZERO: 1,
    D3DBLEND_ONE: 2,
    D3DBLEND_SRCCOLOR: 3,
    D3DBLEND_INVSRCCOLOR: 4,
    D3DBLEND_SRCALPHA: 5,
    D3DBLEND_INVSRCALPHA: 6,
    D3DBLEND_DESTALPHA: 7,
    D3DBLEND_INVDESTALPHA: 8,
    D3DBLEND_DESTCOLOR: 9,
    D3DBLEND_INVDESTCOLOR: 10,
    D3DBLEND_SRCALPHASAT: 11,
    D3DBLEND_BOTHSRCALPHA: 12,
    D3DBLEND_BOTHINVSRCALPHA: 13,
    D3DBLEND_BLENDFACTOR: 14,
    D3DBLEND_INVBLENDFACTOR: 15,
    /* D3D9Ex only -- */
    D3DBLEND_SRCCOLOR2: 16,
    D3DBLEND_INVSRCCOLOR2: 17
    /* -- D3D9Ex only */
};
exports.D3DZBUFFERTYPE = {
    D3DZB_FALSE: 0,
    D3DZB_TRUE: 1,
    D3DZB_USEW: 2 // W buffering
};
exports.D3DCMPFUNC = {
    D3DCMP_NEVER: 1,
    D3DCMP_LESS: 2,
    D3DCMP_EQUAL: 3,
    D3DCMP_LESSEQUAL: 4,
    D3DCMP_GREATER: 5,
    D3DCMP_NOTEQUAL: 6,
    D3DCMP_GREATEREQUAL: 7,
    D3DCMP_ALWAYS: 8
};
exports.D3DCULL = {
    D3DCULL_NONE: 1,
    D3DCULL_CW: 2,
    D3DCULL_CCW: 3
};
exports.D3DRS_COLORWRITEENABLE = {
    D3DCOLORWRITEENABLE_RED: (1 << 0),
    D3DCOLORWRITEENABLE_GREEN: (1 << 1),
    D3DCOLORWRITEENABLE_BLUE: (1 << 2),
    D3DCOLORWRITEENABLE_ALPHA: (1 << 3)
};
exports.D3DDECLTYPE = {
    D3DDECLTYPE_FLOAT1: 0,
    D3DDECLTYPE_FLOAT2: 1,
    D3DDECLTYPE_FLOAT3: 2,
    D3DDECLTYPE_FLOAT4: 3,
    D3DDECLTYPE_D3DCOLOR: 4,
    D3DDECLTYPE_UBYTE4: 5,
    D3DDECLTYPE_SHORT2: 6,
    D3DDECLTYPE_SHORT4: 7,
    D3DDECLTYPE_UBYTE4N: 8,
    D3DDECLTYPE_SHORT2N: 9,
    D3DDECLTYPE_SHORT4N: 10,
    D3DDECLTYPE_USHORT2N: 11,
    D3DDECLTYPE_USHORT4N: 12,
    D3DDECLTYPE_UDEC3: 13,
    D3DDECLTYPE_DEC3N: 14,
    D3DDECLTYPE_FLOAT16_2: 15,
    D3DDECLTYPE_FLOAT16_4: 16,
    D3DDECLTYPE_UNUSED: 17
};
exports.D3DDECLMETHOD = {
    D3DDECLMETHOD_DEFAULT: 0,
    D3DDECLMETHOD_PARTIALU: 1,
    D3DDECLMETHOD_PARTIALV: 2,
    D3DDECLMETHOD_CROSSUV: 3,
    D3DDECLMETHOD_UV: 4,
    D3DDECLMETHOD_LOOKUP: 5,
    D3DDECLMETHOD_LOOKUPPRESAMPLED: 6
};
exports.D3DDECLUSAGE = {
    D3DDECLUSAGE_POSITION: 0,
    D3DDECLUSAGE_BLENDWEIGHT: 1,
    D3DDECLUSAGE_BLENDINDICES: 2,
    D3DDECLUSAGE_NORMAL: 3,
    D3DDECLUSAGE_PSIZE: 4,
    D3DDECLUSAGE_TEXCOORD: 5,
    D3DDECLUSAGE_TANGENT: 6,
    D3DDECLUSAGE_BINORMAL: 7,
    D3DDECLUSAGE_TESSFACTOR: 8,
    D3DDECLUSAGE_POSITIONT: 9,
    D3DDECLUSAGE_COLOR: 10,
    D3DDECLUSAGE_FOG: 11,
    D3DDECLUSAGE_DEPTH: 12,
    D3DDECLUSAGE_SAMPLE: 13
};
exports.D3DFILLMODE = {
    D3DFILL_POINT: 1,
    D3DFILL_WIREFRAME: 2,
    D3DFILL_SOLID: 3
};
exports.D3DTEXTURESTAGESTATETYPE = {
    D3DTSS_COLOROP: 1,
    D3DTSS_COLORARG1: 2,
    D3DTSS_COLORARG2: 3,
    D3DTSS_ALPHAOP: 4,
    D3DTSS_ALPHAARG1: 5,
    D3DTSS_ALPHAARG2: 6,
    D3DTSS_BUMPENVMAT00: 7,
    D3DTSS_BUMPENVMAT01: 8,
    D3DTSS_BUMPENVMAT10: 9,
    D3DTSS_BUMPENVMAT11: 10,
    D3DTSS_TEXCOORDINDEX: 11,
    D3DTSS_BUMPENVLSCALE: 22,
    D3DTSS_BUMPENVLOFFSET: 23,
    D3DTSS_TEXTURETRANSFORMFLAGS: 24,
    D3DTSS_COLORARG0: 26,
    D3DTSS_ALPHAARG0: 27,
    D3DTSS_RESULTARG: 28,
    D3DTSS_CONSTANT: 32 /* Per-stage constant D3DTA_CONSTANT */
};
exports.D3DTEXTUREOP = {
    // Control
    D3DTOP_DISABLE: 1,
    D3DTOP_SELECTARG1: 2,
    D3DTOP_SELECTARG2: 3,
    // Modulate
    D3DTOP_MODULATE: 4,
    D3DTOP_MODULATE2X: 5,
    D3DTOP_MODULATE4X: 6,
    // Add
    D3DTOP_ADD: 7,
    D3DTOP_ADDSIGNED: 8,
    D3DTOP_ADDSIGNED2X: 9,
    D3DTOP_SUBTRACT: 10,
    D3DTOP_ADDSMOOTH: 11,
    // Arg1 + Arg2 - Arg1*Arg2
    // : Arg1 + (1-Arg1)*Arg2
    // Linear alpha blend: Arg1*(Alpha) + Arg2*(1-Alpha)
    D3DTOP_BLENDDIFFUSEALPHA: 12,
    D3DTOP_BLENDTEXTUREALPHA: 13,
    D3DTOP_BLENDFACTORALPHA: 14,
    // Linear alpha blend with pre-multiplied arg1 input: Arg1 + Arg2*(1-Alpha)
    D3DTOP_BLENDTEXTUREALPHAPM: 15,
    D3DTOP_BLENDCURRENTALPHA: 16,
    // Specular mapping
    D3DTOP_PREMODULATE: 17,
    D3DTOP_MODULATEALPHA_ADDCOLOR: 18,
    // COLOROP only
    D3DTOP_MODULATECOLOR_ADDALPHA: 19,
    // COLOROP only
    D3DTOP_MODULATEINVALPHA_ADDCOLOR: 20,
    // COLOROP only
    D3DTOP_MODULATEINVCOLOR_ADDALPHA: 21,
    // COLOROP only
    // Bump mapping
    D3DTOP_BUMPENVMAP: 22,
    D3DTOP_BUMPENVMAPLUMINANCE: 23,
    // This can do either diffuse or specular bump mapping with correct input.
    // Performs the function (Arg1.R*Arg2.R + Arg1.G*Arg2.G + Arg1.B*Arg2.B)
    // where each component has been scaled and offset to make it signed.
    // The result is replicated into all four (including alpha) channels.
    // This is a valid COLOROP only.
    D3DTOP_DOTPRODUCT3: 24,
    // Triadic ops
    D3DTOP_MULTIPLYADD: 25,
    D3DTOP_LERP: 26 // (Arg0)*Arg1 + (1-Arg0)*Arg2
};
exports.D3DTEXTUREARG = {
    D3DTA_SELECTMASK: 0x0000000f,
    D3DTA_DIFFUSE: 0x00000000,
    D3DTA_CURRENT: 0x00000001,
    D3DTA_TEXTURE: 0x00000002,
    D3DTA_TFACTOR: 0x00000003,
    D3DTA_SPECULAR: 0x00000004,
    D3DTA_TEMP: 0x00000005,
    D3DTA_CONSTANT: 0x00000006,
    D3DTA_COMPLEMENT: 0x00000010,
    D3DTA_ALPHAREPLICATE: 0x00000020 // replicate alpha to color components (read modifier)
};
exports.D3DTEXTUREFILTERTYPE = {
    D3DTEXF_NONE: 0,
    D3DTEXF_POINT: 1,
    D3DTEXF_LINEAR: 2,
    D3DTEXF_ANISOTROPIC: 3,
    D3DTEXF_PYRAMIDALQUAD: 6,
    D3DTEXF_GAUSSIANQUAD: 7,
    /* D3D9Ex only -- */
    D3DTEXF_CONVOLUTIONMONO: 8 // Convolution filter for monochrome textures
    /* -- D3D9Ex only */
};
exports.D3DSAMPLERSTATETYPE = {
    D3DSAMP_ADDRESSU: 1,
    D3DSAMP_ADDRESSV: 2,
    D3DSAMP_ADDRESSW: 3,
    D3DSAMP_BORDERCOLOR: 4,
    D3DSAMP_MAGFILTER: 5,
    D3DSAMP_MINFILTER: 6,
    D3DSAMP_MIPFILTER: 7,
    D3DSAMP_MIPMAPLODBIAS: 8,
    D3DSAMP_MAXMIPLEVEL: 9,
    D3DSAMP_MAXANISOTROPY: 10,
    D3DSAMP_SRGBTEXTURE: 11,
    D3DSAMP_ELEMENTINDEX: 12,
    D3DSAMP_DMAPOFFSET: 13 /* Offset in vertices in the pre-sampled displacement map.
                                    Only valid for D3DDMAPSAMPLER sampler  */
};
exports.D3DUSAGE = {
    D3DUSAGE_RENDERTARGET: 0x00000001,
    D3DUSAGE_DEPTHSTENCIL: 0x00000002,
    D3DUSAGE_DYNAMIC: 0x00000200,
    /* D3D9Ex only -- */
    D3DUSAGE_NONSECURE: 0x00800000,
    /* -- D3D9Ex only */
    // When passed to CheckDeviceFormat, D3DUSAGE_AUTOGENMIPMAP may return
    // D3DOK_NOAUTOGEN if the device doesn't support autogeneration for that format.
    // D3DOK_NOAUTOGEN is a success code, not a failure code... the SUCCEEDED and FAILED macros
    // will return true and false respectively for this code.
    D3DUSAGE_AUTOGENMIPMAP: 0x00000400,
    D3DUSAGE_DMAP: 0x00004000,
    // The following usages are valid only for querying CheckDeviceFormat
    D3DUSAGE_QUERY_LEGACYBUMPMAP: 0x00008000,
    D3DUSAGE_QUERY_SRGBREAD: 0x00010000,
    D3DUSAGE_QUERY_FILTER: 0x00020000,
    D3DUSAGE_QUERY_SRGBWRITE: 0x00040000,
    D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING: 0x00080000,
    D3DUSAGE_QUERY_VERTEXTEXTURE: 0x00100000,
    D3DUSAGE_QUERY_WRAPANDMIP: 0x00200000,
    /* Usages for Vertex/Index buffers */
    D3DUSAGE_WRITEONLY: 0x00000008,
    D3DUSAGE_SOFTWAREPROCESSING: 0x00000010,
    D3DUSAGE_DONOTCLIP: 0x00000020,
    D3DUSAGE_POINTS: 0x00000040,
    D3DUSAGE_RTPATCHES: 0x00000080,
    D3DUSAGE_NPATCHES: 0x00000100,
    /* D3D9Ex only -- */
    D3DUSAGE_TEXTAPI: 0x10000000,
    D3DUSAGE_RESTRICTED_CONTENT: 0x00000800,
    D3DUSAGE_RESTRICT_SHARED_RESOURCE: 0x00002000,
    D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER: 0x00001000,
    /* -- D3D9Ex only */
};
exports.D3DPOOL = {
    D3DPOOL_DEFAULT: 0,
    D3DPOOL_MANAGED: 1,
    D3DPOOL_SYSTEMMEM: 2,
    D3DPOOL_SCRATCH: 3
};
exports.D3DPRIMITIVETYPE = {
    D3DPT_POINTLIST: 1,
    D3DPT_LINELIST: 2,
    D3DPT_LINESTRIP: 3,
    D3DPT_TRIANGLELIST: 4,
    D3DPT_TRIANGLESTRIP: 5,
    D3DPT_TRIANGLEFAN: 6
};
exports.D3DTRANSFORMSTATETYPE = {
    D3DTS_VIEW: 2,
    D3DTS_PROJECTION: 3,
    D3DTS_TEXTURE0: 16,
    D3DTS_TEXTURE1: 17,
    D3DTS_TEXTURE2: 18,
    D3DTS_TEXTURE3: 19,
    D3DTS_TEXTURE4: 20,
    D3DTS_TEXTURE5: 21,
    D3DTS_TEXTURE6: 22,
    D3DTS_TEXTURE7: 23,
    D3DTS_WORLD: (256 + 0),
    D3DTS_WORLD1: (256 + 1),
    D3DTS_WORLD2: (256 + 2),
    D3DTS_WORLD3: (256 + 3),
};
